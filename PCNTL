虽然PHP本身不支持多进程，但基于Linux的PHP扩展PCNTL却可以提供多进程编程

FORK编程的大概原理是，每次调用fork函数，操作系统就会产生一个子进程，儿子进程所有的堆栈信息都是原封不动复制父进程的，而在fork之后，
父进程与子进程实际上是相互独立的，父子进程不会相互影响。也就是说，fork调用位置之前的所有变量，父进程和子进程是一样的，但fork之后则取决于各自的动作，
且数据也是独立的；因为数据已经完整的复制给了子进程。而唯一能够区分父子进程的方法就是判断fork的返回值。如果为0，表示是子进程，如果为正数，表示为父进程，
且该正数为子进程的PID（进程号），而如果是-1，表示子进程创建失败。请看如下代码：

<?php
$pid=pcntl_fork();
switch($pid){
case -1:
    echo"couldn't fork";
    break;
case 0:
    echo"I'm parent";
    break;
default:
    echo"I'm child";

}

?>

子进程的使用通常会涉及到两种：子进程执行完任务直接退出；子进程常驻内存，等待任务。
无论哪一种，无可避免的一个问题就是僵尸进程。僵尸进程就是子进程退出后，父进程没有及时回收，系统仍然保留子进程的执行信息（例如PID，退出状态等），
留待其他程序读取。如果僵尸进程数量很少，我们可以忽略掉。但如果是在一个循环中fork（并发编程中常见的死循环），这个问题就不能无视了，
父进程必须定期回收已经退出的子进程。子进程的回收我们采用pcnt_wait函数来完成

<?php

while(true){

    $pid= pcntl_fork();

    switch($pid){

    case-1:

        echo"couldn't fork";

        break;

    case0:{

        $subPid= pcntl_wait($status);

        var_dump($status);

        break;

    }

    default:

        echo"I'm child";

        exit(0);

    }

}
